#!/usr/bin/env ruby

# Grab data from gerrit and populate the
# couchbase bucket with the latest updates.

require 'cgi'
require 'couchbase'
require 'json'
require 'net/http'
require 'uri'
require 'optparse'
require 'stringio'

options = {
  couchbase: 'http://localhost:8091',
  gerrit: 'http://review.couchbase.org'
}

OptionParser.new do |opts|
  opts.banner = 'Usage: grab-gerrit [options]'
  opts.on('-c', '--couchbase=URL', "URL of Couchbase (#{options[:couchbase]})") do |val|
    options[:couchbase] = val
  end
  opts.on('-g', '--gerrit=URL', "URL of Gerrit (#{options[:gerrit]})") do |val|
    options[:gerrit] = val
  end
end.parse!

# -----------------------------------------------------------------------------

def populate_cb(cb, gerrit_url, project, out)
  out.puts "project: #{project}"

  res = Net::HTTP.get(URI(gerrit_url + '/changes/?q=project:' + project))
  changes = JSON.parse(res.sub(/^\)\]\}\'/, ''))

  changes = changes.sort { |a, b| b['updated'] <=> a['updated'] }
  if changes.length > 0
    out.puts "  latest: #{changes[0]['updated']}"
  end

  i = 0
  changes.each do |change|
    # Example change...
    # { "id": "ep-engine~master~If0eec43dc07253fa9c757910bb3ff110512220b3",
    #   "project": "ep-engine",
    #   "branch": "master",
    #   "change_id": "If0eec43dc07253fa9c757910bb3ff110512220b3",
    #   "subject": "Move ConnMap::notifyVBConnections to TapConnMap.",
    #   "status": "MERGED",
    #   "created": "2014-07-10 01:43:16.647000000",
    #   "updated": "2014-07-10 19:28:19.256000000",
    #   "insertions": 25,
    #   "deletions": 25,
    #   "_sortkey": "002e561000009955",
    #   "_number": 39253,
    #   "owner": {
    #     "name": "Chiyoung Seo"
    #   }
    # }
    key = 'gerrit/' + change['id']
    doc = {
      type: 'gerrit/change',
      key: key,
      url: "#{gerrit_url}/#{change['_number']}",
      id: change['id'],
      project: change['project'],
      branch: change['branch'],
      change_id: change['change_id'],
      title: change['subject'], # Relabeled.
      status: change['status'],
      createdDate: change['created'], # Relabeled.
      updatedDate: change['updated'], # Relabeled.
      owner: change['owner']['name'], # Relabeled.
    }

    ok = cb.set(key, doc)
    abort 'cb.set failed' unless ok

    i += 1
  end

  [changes.length, i]
end

res = Net::HTTP.get(URI(options[:gerrit] + '/projects/'))
projects = JSON.parse(res.sub(/^\)\]\}\'/, ''))
threads = []
projects.each do |project, _project_obj|
  threads << Thread.new do
    cb = Couchbase.connect(options[:couchbase])
    out = StringIO.new
    changes_total, changes_set = populate_cb(cb, options[:gerrit], project, out)
    out.puts "  changes_total: #{changes_total}"
    out.puts "  changes_set: #{changes_set}"
    puts out.string
  end
end
threads.each(&:join)
